System.register(['oidc-token-manager'], function(exports_1, context_1) {
    "use strict";
    var __moduleName = context_1 && context_1.id;
    var AuthenticationInitializer;
    return {
        setters:[
            function (_1) {}],
        execute: function() {
            AuthenticationInitializer = (function () {
                function AuthenticationInitializer() {
                    this.AuthenticationManagerSettings = null;
                    this.AccessToken = null;
                    this.IdentityToken = null;
                    this.Profile = null;
                }
                Object.defineProperty(AuthenticationInitializer, "Current", {
                    get: function () {
                        if (AuthenticationInitializer._current === null) {
                            AuthenticationInitializer._current = new AuthenticationInitializer();
                        }
                        return AuthenticationInitializer._current;
                    },
                    enumerable: true,
                    configurable: true
                });
                AuthenticationInitializer.Reset = function () {
                    AuthenticationInitializer._current = null;
                };
                AuthenticationInitializer.prototype.Init = function (authenticationSettings) {
                    if (authenticationSettings.authority == null || authenticationSettings.client_id == null) {
                        throw "Should be informed at least 'authority' and 'client_id'!";
                    }
                    authenticationSettings.client_url = authenticationSettings.client_url || location.href;
                    authenticationSettings.scopes = authenticationSettings.scopes || 'openid profile email offline_access';
                    authenticationSettings.response_type = authenticationSettings.response_type || 'code id_token token';
                    authenticationSettings.open_on_popup = authenticationSettings.open_on_popup || false;
                    var localStorage_redirect_uri = localStorage.getItem('redirect_uri');
                    var localStorage_silent_redirect_uri = localStorage.getItem('silent_redirect_uri');
                    var localStorage_post_logout_redirect_uri = localStorage.getItem('post_logout_redirect_uri');
                    this.AuthenticationManagerSettings =
                        {
                            authority: authenticationSettings.authority,
                            client_id: authenticationSettings.client_id,
                            client_url: authenticationSettings.client_url,
                            open_on_popup: authenticationSettings.open_on_popup,
                            response_type: authenticationSettings.response_type,
                            scopes: authenticationSettings.scopes,
                            redirect_uri: localStorage_redirect_uri || authenticationSettings.client_url + '?callback=true',
                            silent_redirect_uri: localStorage_silent_redirect_uri || authenticationSettings.client_url + "?silentrefreshframe=true",
                            post_logout_redirect_uri: localStorage_post_logout_redirect_uri || authenticationSettings.client_url + "index.html",
                            authorization_url: authenticationSettings.authority + "/connect/authorize",
                            token_url: authenticationSettings.authority + "/connect/token",
                            userinfo_url: authenticationSettings.authority + "/connect/userinfo"
                        };
                    localStorage.setItem('redirect_uri', this.AuthenticationManagerSettings.redirect_uri);
                    localStorage.setItem('silent_redirect_uri', this.AuthenticationManagerSettings.silent_redirect_uri);
                    localStorage.setItem('post_logout_redirect_uri', this.AuthenticationManagerSettings.post_logout_redirect_uri);
                    var config = {
                        authority: this.AuthenticationManagerSettings.authority,
                        client_id: this.AuthenticationManagerSettings.client_id,
                        load_user_profile: true,
                        scope: this.AuthenticationManagerSettings.scopes,
                        response_type: this.AuthenticationManagerSettings.response_type,
                        client_url: this.AuthenticationManagerSettings.client_url,
                        redirect_uri: this.AuthenticationManagerSettings.redirect_uri,
                        post_logout_redirect_uri: this.AuthenticationManagerSettings.post_logout_redirect_uri,
                        silent_redirect_uri: this.AuthenticationManagerSettings.silent_redirect_uri,
                        silent_renew: true,
                        authorization_endpoint: this.AuthenticationManagerSettings.authority + "/connect/authorize",
                        userinfo_endpoint: this.AuthenticationManagerSettings.authority + "/connect/userinfo",
                        authorization_url: this.AuthenticationManagerSettings.authority + "/connect/authorize",
                        token_url: this.AuthenticationManagerSettings.authority + "/connect/token",
                        userinfo_url: this.AuthenticationManagerSettings.authority + "/connect/userinfo"
                    };
                    this.oidcTokenManager = new OidcTokenManager(config);
                };
                AuthenticationInitializer.prototype.Callback = function () {
                    this.oidcTokenManager.processTokenCallbackAsync();
                };
                AuthenticationInitializer.prototype.RenewTokenSilent = function () {
                    this.oidcTokenManager.renewTokenSilentAsync();
                };
                AuthenticationInitializer.prototype.Login = function (openOnPopUp) {
                    var shouldOpenOnPopUp = openOnPopUp || this.AuthenticationManagerSettings.open_on_popup;
                    if (location.href.substring(0, this.AuthenticationManagerSettings.redirect_uri.length) === this.AuthenticationManagerSettings.redirect_uri) {
                        this.Callback();
                    }
                    else if (location.href.substring(0, this.AuthenticationManagerSettings.silent_redirect_uri.length) === this.AuthenticationManagerSettings.silent_redirect_uri) {
                        this.RenewTokenSilent();
                    }
                    else if (location.href.substring(0, this.AuthenticationManagerSettings.client_url.length) === this.AuthenticationManagerSettings.client_url) {
                        if (shouldOpenOnPopUp) {
                            this.oidcTokenManager.openPopupForTokenAsync();
                        }
                        else {
                            this.oidcTokenManager.redirectForToken();
                        }
                    }
                    this.GenerateTokens();
                };
                AuthenticationInitializer.prototype.GenerateTokens = function () {
                    this.AccessToken = JSON.parse(atob(this.oidcTokenManager.access_token.split('.')[1]));
                    this.IdentityToken = JSON.parse(atob(this.oidcTokenManager.id_token.split('.')[1]));
                    this.Profile = this.oidcTokenManager.profile;
                };
                AuthenticationInitializer._current = null;
                return AuthenticationInitializer;
            }());
            exports_1("AuthenticationInitializer", AuthenticationInitializer);
        }
    }
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
