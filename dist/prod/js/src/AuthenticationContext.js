System.register(['./Pattern', 'q', 'oidc-client'], function(exports_1, context_1) {
    "use strict";
    var __moduleName = context_1 && context_1.id;
    var Pattern_1, Q, Oidc;
    var AuthenticationContext;
    return {
        setters:[
            function (Pattern_1_1) {
                Pattern_1 = Pattern_1_1;
            },
            function (Q_1) {
                Q = Q_1;
            },
            function (Oidc_1) {
                Oidc = Oidc_1;
            }],
        execute: function() {
            AuthenticationContext = (function () {
                function AuthenticationContext() {
                    this.callbacksTokenObtained = new Array();
                    this.callbacksTokenRenewFailedRetryMax = new Array();
                    var authenticationSettingsLoadedFromStorage = this.AuthenticationManagerSettings;
                    if (authenticationSettingsLoadedFromStorage != null) {
                        this.oidcTokenManager = new Oidc.UserManager(authenticationSettingsLoadedFromStorage);
                    }
                }
                Object.defineProperty(AuthenticationContext, "Current", {
                    get: function () {
                        if (AuthenticationContext._current === null) {
                            AuthenticationContext._current = new AuthenticationContext();
                        }
                        return AuthenticationContext._current;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AuthenticationContext.prototype, "IsInitialized", {
                    get: function () {
                        if (this.AuthenticationManagerSettings != null) {
                            return true;
                        }
                        else {
                            return false;
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                AuthenticationContext.Reset = function () {
                    AuthenticationContext._current = null;
                };
                AuthenticationContext.prototype.AddOnTokenObtained = function (callback) {
                    this.callbacksTokenObtained.push(callback);
                    this.oidcTokenManager.events.addUserLoaded(callback);
                };
                AuthenticationContext.prototype.AddOnTokenRenewFailedMaxRetry = function (callback) {
                    this.callbacksTokenRenewFailedRetryMax.push(callback);
                };
                Object.defineProperty(AuthenticationContext.prototype, "AuthenticationManagerSettings", {
                    get: function () {
                        var authenticationSettingsFromLocalStorage = null;
                        var authenticationSettingsFromLocalStorageStringify = localStorage.getItem('AuthenticationManagerSettings');
                        if (authenticationSettingsFromLocalStorageStringify != null) {
                            authenticationSettingsFromLocalStorage = JSON.parse(authenticationSettingsFromLocalStorageStringify);
                        }
                        return authenticationSettingsFromLocalStorage;
                    },
                    set: function (value) {
                        localStorage.setItem('AuthenticationManagerSettings', JSON.stringify(value));
                    },
                    enumerable: true,
                    configurable: true
                });
                AuthenticationContext.prototype.Initialize = function (authenticationSettings) {
                    if (authenticationSettings.authority == null || authenticationSettings.client_id == null || authenticationSettings.client_url == null) {
                        throw "Should be informed at least 'authority', 'client_id' and 'client_url'!";
                    }
                    if (authenticationSettings.pattern == null) {
                        authenticationSettings.pattern = Pattern_1.Pattern.none;
                    }
                    authenticationSettings.client_url = authenticationSettings.client_url;
                    authenticationSettings.scope = authenticationSettings.scope || 'openid profile email offline_access';
                    authenticationSettings.response_type = authenticationSettings.response_type || 'code id_token token';
                    authenticationSettings.open_on_popup = authenticationSettings.open_on_popup || false;
                    authenticationSettings.max_retry_renew = authenticationSettings.max_retry_renew || 35;
                    console.debug('Max retry setted to: ' + authenticationSettings.max_retry_renew);
                    authenticationSettings.silent_renew_timeout = authenticationSettings.silent_renew_timeout || 40 * 1000;
                    console.debug('Silent renew timeout setted to: ' + authenticationSettings.silent_renew_timeout + ' miliseconds');
                    this.AuthenticationManagerSettings =
                        {
                            authority: authenticationSettings.authority,
                            client_id: authenticationSettings.client_id,
                            client_url: authenticationSettings.client_url,
                            max_retry_renew: authenticationSettings.max_retry_renew,
                            silent_renew_timeout: authenticationSettings.silent_renew_timeout,
                            response_type: authenticationSettings.response_type,
                            scope: authenticationSettings.scope,
                            pattern: authenticationSettings.pattern,
                            redirect_uri: authenticationSettings.client_url,
                            silent_redirect_uri: authenticationSettings.client_url,
                            post_logout_redirect_uri: authenticationSettings.client_url,
                            authorization_url: authenticationSettings.authorization_url || authenticationSettings.authority + "/connect/authorize",
                            token_url: authenticationSettings.token_url || authenticationSettings.authority + "/connect/token",
                            userinfo_url: authenticationSettings.userinfo_url || authenticationSettings.authority + "/connect/userinfo",
                            loadUserInfo: true,
                            automaticSilentRenew: true,
                        };
                    var pattern = this.AuthenticationManagerSettings.pattern;
                    console.debug('User pattern: ' + Pattern_1.Pattern[pattern]);
                    if (this.AuthenticationManagerSettings.pattern == Pattern_1.Pattern.auto) {
                        var environment = null;
                        try {
                            environment = window;
                        }
                        catch (error) {
                            console.debug('Should not be an environment with a window global (nativescript/node maybe?)');
                            console.debug(error);
                        }
                        if (environment != null) {
                            if (!!environment.cordova) {
                                pattern = Pattern_1.Pattern.cordova;
                            }
                            else if (environment && environment.process && environment.process.type) {
                                pattern = Pattern_1.Pattern.electron;
                            }
                            else if (environment.location.href.indexOf('file:') > -1) {
                                pattern = Pattern_1.Pattern.ietf;
                            }
                            else {
                                pattern = Pattern_1.Pattern.none;
                            }
                        }
                        else {
                            pattern = Pattern_1.Pattern.nativescript;
                        }
                    }
                    console.debug('Environment pattern: ' + Pattern_1.Pattern[pattern]);
                    if (pattern == Pattern_1.Pattern.ietf || pattern == Pattern_1.Pattern.electron || pattern == Pattern_1.Pattern.nativescript) {
                        var settings = this.AuthenticationManagerSettings;
                        settings.client_url = 'urn:ietf:wg:oauth:2.0:oob:auto';
                        this.AuthenticationManagerSettings = settings;
                    }
                    if (pattern == Pattern_1.Pattern.cordova) {
                        var settings = this.AuthenticationManagerSettings;
                        settings.client_url = 'https://localhost/oidc';
                        settings.popupNavigator = new Oidc.CordovaPopupNavigator();
                        settings.iframeNavigator = new Oidc.CordovaIFrameNavigator();
                        this.AuthenticationManagerSettings = settings;
                    }
                    console.debug('ClientUrl: ' + authenticationSettings.client_url);
                    var userManagerSettings = this.AuthenticationManagerSettings;
                    this.oidcTokenManager = new Oidc.UserManager(userManagerSettings);
                };
                AuthenticationContext.prototype.ProcessTokenIfNeeded = function () {
                    var _this = this;
                    return this.IsAuthenticated.then(function (isAuthenticated) {
                        if (location.href.indexOf('access_token=') > -1 && (isAuthenticated || location.href.indexOf('prompt=none') > -1)) {
                            console.debug('Processing token! (silently)');
                            return _this.oidcTokenManager.signinSilentCallback();
                        }
                        else if (location.href.indexOf('access_token=') > -1) {
                            console.debug('Processing token!');
                            return _this.ProcessTokenCallback();
                        }
                        var qPromise = Q.resolve(null);
                        return qPromise;
                    });
                };
                AuthenticationContext.prototype.Init = function (authenticationSettings) {
                    if (authenticationSettings != null) {
                        this.Initialize(authenticationSettings);
                    }
                    return this.ProcessTokenIfNeeded();
                };
                AuthenticationContext.prototype.ProcessTokenCallback = function () {
                    var _this = this;
                    this.ValidateInitialization();
                    var promise = null;
                    if (this.AuthenticationManagerSettings.open_on_popup) {
                        promise = this.oidcTokenManager.signinPopupCallback();
                    }
                    else {
                        promise = this.oidcTokenManager.signinRedirectCallback();
                    }
                    var promiseRedirect = promise
                        .then(function () {
                        _this.RedirectToInitialPage(_this.AuthenticationManagerSettings.redirect_uri);
                    }, function (error) {
                        var message = "Problem Getting Token : " + (error.message || error);
                        console.error(message);
                        throw message;
                    });
                    return promiseRedirect;
                };
                AuthenticationContext.prototype.RedirectToInitialPage = function (uri) {
                    location.assign(uri);
                };
                AuthenticationContext.prototype.ValidateInitialization = function () {
                    if (this.AuthenticationManagerSettings == null) {
                        throw "AuthenticationContext uninitialized!";
                    }
                };
                AuthenticationContext.prototype.Login = function (openOnPopUp) {
                    var _this = this;
                    return this.IsAuthenticated.then(function (isAuthenticated) {
                        if (isAuthenticated === false) {
                            _this.ValidateInitialization();
                            var shouldOpenOnPopUp = openOnPopUp || _this.AuthenticationManagerSettings.open_on_popup;
                            if (shouldOpenOnPopUp) {
                                return _this.oidcTokenManager.signinPopup();
                            }
                            else {
                                return _this.oidcTokenManager.signinRedirect();
                            }
                        }
                        else {
                            console.warn('Already authenticated');
                            return _this.oidcTokenManager.getUser().then(function (user) {
                                _this.callbacksTokenObtained.forEach(function (callback) {
                                    callback(user);
                                });
                            });
                        }
                    });
                };
                Object.defineProperty(AuthenticationContext.prototype, "IsAuthenticated", {
                    get: function () {
                        return this.oidcTokenManager.getUser().then(function (user) { return user != null; });
                    },
                    enumerable: true,
                    configurable: true
                });
                AuthenticationContext._current = null;
                return AuthenticationContext;
            }());
            exports_1("AuthenticationContext", AuthenticationContext);
        }
    }
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkF1dGhlbnRpY2F0aW9uQ29udGV4dC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztZQVlBO2dCQWlESTtvQkE1Q1EsMkJBQXNCLEdBQXFDLElBQUksS0FBSyxFQUE2QixDQUFDO29CQUVsRyxzQ0FBaUMsR0FBc0IsSUFBSSxLQUFLLEVBQWMsQ0FBQztvQkE0Q25GLElBQUksdUNBQXVDLEdBQUcsSUFBSSxDQUFDLDZCQUE2QixDQUFDO29CQUNqRixFQUFFLENBQUEsQ0FBQyx1Q0FBdUMsSUFBSSxJQUFJLENBQUMsQ0FDbkQsQ0FBQzt3QkFDRyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFFLHVDQUF1QyxDQUFFLENBQUM7b0JBQzVGLENBQUM7Z0JBQ0wsQ0FBQztnQkEvQ0Qsc0JBQWtCLGdDQUFPO3lCQUF6Qjt3QkFFSSxFQUFFLENBQUEsQ0FBQyxxQkFBcUIsQ0FBQyxRQUFRLEtBQUssSUFBSSxDQUFDLENBQzNDLENBQUM7NEJBQ0cscUJBQXFCLENBQUMsUUFBUSxHQUFJLElBQUkscUJBQXFCLEVBQUUsQ0FBQzt3QkFDbEUsQ0FBQzt3QkFDRCxNQUFNLENBQUMscUJBQXFCLENBQUMsUUFBUSxDQUFDO29CQUMxQyxDQUFDOzs7bUJBQUE7Z0JBRUQsc0JBQVcsZ0RBQWE7eUJBQXhCO3dCQUVJLEVBQUUsQ0FBQSxDQUFDLElBQUksQ0FBQyw2QkFBNkIsSUFBSSxJQUFJLENBQUMsQ0FDOUMsQ0FBQzs0QkFDRyxNQUFNLENBQUMsSUFBSSxDQUFDO3dCQUNoQixDQUFDO3dCQUNELElBQUksQ0FDSixDQUFDOzRCQUNHLE1BQU0sQ0FBQyxLQUFLLENBQUM7d0JBQ2pCLENBQUM7b0JBQ0wsQ0FBQzs7O21CQUFBO2dCQUVhLDJCQUFLLEdBQW5CO29CQUVJLHFCQUFxQixDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7Z0JBQzFDLENBQUM7Z0JBRU0sa0RBQWtCLEdBQXpCLFVBQTBCLFFBQW1DO29CQUV6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QUF1QixDQUFDLENBQUM7NEJBQ3RDLE1BQU0sQ0FBQyxLQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQUMsSUFBSTtnQ0FDN0MsS0FBSSxDQUFDLHNCQUFzQixDQUFDLE9BQU8sQ0FBQyxVQUFDLFFBQVE7b0NBQ3pDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztnQ0FDbkIsQ0FBQyxDQUFDLENBQUM7NEJBQ1AsQ0FBQyxDQUFDLENBQUM7d0JBQ1AsQ0FBQztvQkFFTCxDQUFDLENBQUMsQ0FBQztnQkFHUCxDQUFDO2dCQUVELHNCQUFXLGtEQUFlO3lCQUExQjt3QkFFSSxNQUFNLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFBLElBQUksSUFBSSxPQUFBLElBQUksSUFBSSxJQUFJLEVBQVosQ0FBWSxDQUFDLENBQUM7b0JBYXRFLENBQUM7OzttQkFBQTtnQkE3YWMsOEJBQVEsR0FBMEIsSUFBSSxDQUFDO2dCQWdnQjFELDRCQUFDO1lBQUQsQ0FuZ0JBLEFBbWdCQyxJQUFBO1lBbmdCRCx5REFtZ0JDLENBQUEiLCJmaWxlIjoiQXV0aGVudGljYXRpb25Db250ZXh0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSUF1dGhlbnRpY2F0aW9uTWFuYWdlclNldHRpbmdzIH0gZnJvbSAnLi9JQXV0aGVudGljYXRpb25NYW5hZ2VyU2V0dGluZ3MnO1xyXG5pbXBvcnQgeyBJQXV0aGVudGljYXRpb25TZXR0aW5ncyB9IGZyb20gJy4vSUF1dGhlbnRpY2F0aW9uU2V0dGluZ3MnO1xyXG5pbXBvcnQgeyBQYXR0ZXJuIH0gZnJvbSAnLi9QYXR0ZXJuJztcclxuXHJcbmltcG9ydCAqIGFzIFEgZnJvbSAncSc7XHJcblxyXG5pbXBvcnQgKiBhcyBPaWRjIGZyb20gJ29pZGMtY2xpZW50JztcclxuXHJcblxyXG4vKipcclxuICogQXV0aGVudGljYXRpb25Jbml0aWFsaXplclxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEF1dGhlbnRpY2F0aW9uQ29udGV4dCBcclxue1xyXG4gICAgXHJcbiAgICBwcml2YXRlIHN0YXRpYyBfY3VycmVudDogQXV0aGVudGljYXRpb25Db250ZXh0ID0gbnVsbDtcclxuXHJcbiAgICBwcml2YXRlIGNhbGxiYWNrc1Rva2VuT2J0YWluZWQgOkFycmF5PCh1c2VyOiBPaWRjLlVzZXIpID0+IHZvaWQ+ID0gbmV3IEFycmF5PCh1c2VyOiBPaWRjLlVzZXIpID0+IHZvaWQ+KCk7XHJcblxyXG4gICAgcHJpdmF0ZSBjYWxsYmFja3NUb2tlblJlbmV3RmFpbGVkUmV0cnlNYXggOkFycmF5PCgpID0+IHZvaWQ+ID0gbmV3IEFycmF5PCgpID0+IHZvaWQ+KCk7XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBnZXQgQ3VycmVudCgpOiBBdXRoZW50aWNhdGlvbkNvbnRleHQgXHJcbiAgICB7XHJcbiAgICAgICAgaWYoQXV0aGVudGljYXRpb25Db250ZXh0Ll9jdXJyZW50ID09PSBudWxsKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgQXV0aGVudGljYXRpb25Db250ZXh0Ll9jdXJyZW50ID0gIG5ldyBBdXRoZW50aWNhdGlvbkNvbnRleHQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIEF1dGhlbnRpY2F0aW9uQ29udGV4dC5fY3VycmVudDtcclxuICAgIH1cclxuICAgIFxyXG4gICAgcHVibGljIGdldCBJc0luaXRpYWxpemVkKClcclxuICAgIHtcclxuICAgICAgICBpZih0aGlzLkF1dGhlbnRpY2F0aW9uTWFuYWdlclNldHRpbmdzICE9IG51bGwpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgcHVibGljIHN0YXRpYyBSZXNldCgpXHJcbiAgICB7XHJcbiAgICAgICAgQXV0aGVudGljYXRpb25Db250ZXh0Ll9jdXJyZW50ID0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgQWRkT25Ub2tlbk9idGFpbmVkKGNhbGxiYWNrOiAodXNlcjogT2lkYy5Vc2VyKSA9PiB2b2lkKVxyXG4gICAge1xyXG4gICAgICAgIHRoaXMuY2FsbGJhY2tzVG9rZW5PYnRhaW5lZC5wdXNoKGNhbGxiYWNrKTtcclxuICAgICAgICB0aGlzLm9pZGNUb2tlbk1hbmFnZXIuZXZlbnRzLmFkZFVzZXJMb2FkZWQoY2FsbGJhY2spO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBBZGRPblRva2VuUmVuZXdGYWlsZWRNYXhSZXRyeShjYWxsYmFjazogKCkgPT4gdm9pZClcclxuICAgIHtcclxuICAgICAgICB0aGlzLmNhbGxiYWNrc1Rva2VuUmVuZXdGYWlsZWRSZXRyeU1heC5wdXNoKGNhbGxiYWNrKTtcclxuICAgICAgICAvL3RoaXMub2lkY1Rva2VuTWFuYWdlci5hZGRPblNpbGVudFRva2VuUmVuZXdGYWlsZWQoY2FsbGJhY2spO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgb2lkY1Rva2VuTWFuYWdlcjogT2lkYy5Vc2VyTWFuYWdlcjtcclxuICAgICAgICBcclxuICAgIGNvbnN0cnVjdG9yKCkgXHJcbiAgICB7XHJcbiAgICAgICAgbGV0IGF1dGhlbnRpY2F0aW9uU2V0dGluZ3NMb2FkZWRGcm9tU3RvcmFnZSA9IHRoaXMuQXV0aGVudGljYXRpb25NYW5hZ2VyU2V0dGluZ3M7XHJcbiAgICAgICAgaWYoYXV0aGVudGljYXRpb25TZXR0aW5nc0xvYWRlZEZyb21TdG9yYWdlICE9IG51bGwpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLm9pZGNUb2tlbk1hbmFnZXIgPSBuZXcgT2lkYy5Vc2VyTWFuYWdlciggYXV0aGVudGljYXRpb25TZXR0aW5nc0xvYWRlZEZyb21TdG9yYWdlICk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBwcm90ZWN0ZWQgZ2V0IEF1dGhlbnRpY2F0aW9uTWFuYWdlclNldHRpbmdzKCk6IElBdXRoZW50aWNhdGlvbk1hbmFnZXJTZXR0aW5ncyBcclxuICAgIHtcclxuICAgICAgICBsZXQgYXV0aGVudGljYXRpb25TZXR0aW5nc0Zyb21Mb2NhbFN0b3JhZ2U6IElBdXRoZW50aWNhdGlvbk1hbmFnZXJTZXR0aW5ncyA9IG51bGw7XHJcbiAgICAgICAgbGV0IGF1dGhlbnRpY2F0aW9uU2V0dGluZ3NGcm9tTG9jYWxTdG9yYWdlU3RyaW5naWZ5ID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ0F1dGhlbnRpY2F0aW9uTWFuYWdlclNldHRpbmdzJyk7XHJcbiAgICAgICAgaWYoYXV0aGVudGljYXRpb25TZXR0aW5nc0Zyb21Mb2NhbFN0b3JhZ2VTdHJpbmdpZnkgIT0gbnVsbClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGF1dGhlbnRpY2F0aW9uU2V0dGluZ3NGcm9tTG9jYWxTdG9yYWdlID0gSlNPTi5wYXJzZShhdXRoZW50aWNhdGlvblNldHRpbmdzRnJvbUxvY2FsU3RvcmFnZVN0cmluZ2lmeSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBhdXRoZW50aWNhdGlvblNldHRpbmdzRnJvbUxvY2FsU3RvcmFnZTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgcHJvdGVjdGVkIHNldCBBdXRoZW50aWNhdGlvbk1hbmFnZXJTZXR0aW5ncyh2YWx1ZTogSUF1dGhlbnRpY2F0aW9uTWFuYWdlclNldHRpbmdzKVxyXG4gICAge1xyXG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdBdXRoZW50aWNhdGlvbk1hbmFnZXJTZXR0aW5ncycsIEpTT04uc3RyaW5naWZ5KHZhbHVlKSk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHByb3RlY3RlZCBJbml0aWFsaXplKGF1dGhlbnRpY2F0aW9uU2V0dGluZ3M6IElBdXRoZW50aWNhdGlvblNldHRpbmdzKVxyXG4gICAge1xyXG4gICAgICAgIGlmKGF1dGhlbnRpY2F0aW9uU2V0dGluZ3MuYXV0aG9yaXR5ID09IG51bGwgfHwgYXV0aGVudGljYXRpb25TZXR0aW5ncy5jbGllbnRfaWQgPT0gbnVsbCB8fCBhdXRoZW50aWNhdGlvblNldHRpbmdzLmNsaWVudF91cmwgPT0gbnVsbClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRocm93IFwiU2hvdWxkIGJlIGluZm9ybWVkIGF0IGxlYXN0ICdhdXRob3JpdHknLCAnY2xpZW50X2lkJyBhbmQgJ2NsaWVudF91cmwnIVwiO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBpZihhdXRoZW50aWNhdGlvblNldHRpbmdzLnBhdHRlcm4gPT0gbnVsbClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGF1dGhlbnRpY2F0aW9uU2V0dGluZ3MucGF0dGVybiA9IFBhdHRlcm4ubm9uZTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBcclxuICAgICAgICAvL1NldCBkZWZhdWx0IHZhbHVlcyBpZiBub3QgaW5mb3JtZWRcclxuICAgICAgICBhdXRoZW50aWNhdGlvblNldHRpbmdzLmNsaWVudF91cmwgPSBhdXRoZW50aWNhdGlvblNldHRpbmdzLmNsaWVudF91cmw7IC8vU2VsZiB1cmlcclxuXHJcbiAgICAgICAgYXV0aGVudGljYXRpb25TZXR0aW5ncy5zY29wZSA9IGF1dGhlbnRpY2F0aW9uU2V0dGluZ3Muc2NvcGUgfHwgJ29wZW5pZCBwcm9maWxlIGVtYWlsIG9mZmxpbmVfYWNjZXNzJzsgLy9PcGVuSWQgZGVmYXVsdCBzY29wZXNcclxuICAgICAgICBhdXRoZW50aWNhdGlvblNldHRpbmdzLnJlc3BvbnNlX3R5cGUgPSBhdXRoZW50aWNhdGlvblNldHRpbmdzLnJlc3BvbnNlX3R5cGUgfHwgJ2NvZGUgaWRfdG9rZW4gdG9rZW4nOyAvL0h5YnJpZCBmbG93IGF0IGRlZmF1bHRcclxuICAgICAgICBhdXRoZW50aWNhdGlvblNldHRpbmdzLm9wZW5fb25fcG9wdXAgPSBhdXRoZW50aWNhdGlvblNldHRpbmdzLm9wZW5fb25fcG9wdXAgfHwgZmFsc2U7IC8vUmVkaXJlY3QgZm9yIGRlZmF1bHRcclxuXHJcbiAgICAgICAgYXV0aGVudGljYXRpb25TZXR0aW5ncy5tYXhfcmV0cnlfcmVuZXcgPSBhdXRoZW50aWNhdGlvblNldHRpbmdzLm1heF9yZXRyeV9yZW5ldyB8fCAzNTtcclxuICAgICAgICBjb25zb2xlLmRlYnVnKCdNYXggcmV0cnkgc2V0dGVkIHRvOiAnICsgYXV0aGVudGljYXRpb25TZXR0aW5ncy5tYXhfcmV0cnlfcmVuZXcpO1xyXG4gICAgICAgIGF1dGhlbnRpY2F0aW9uU2V0dGluZ3Muc2lsZW50X3JlbmV3X3RpbWVvdXQgPSBhdXRoZW50aWNhdGlvblNldHRpbmdzLnNpbGVudF9yZW5ld190aW1lb3V0IHx8IDQwICogMTAwMDsgLy80MCBzZWNvbmRzIHRvIHRpbWVvdXRcclxuICAgICAgICBjb25zb2xlLmRlYnVnKCdTaWxlbnQgcmVuZXcgdGltZW91dCBzZXR0ZWQgdG86ICcgKyBhdXRoZW50aWNhdGlvblNldHRpbmdzLnNpbGVudF9yZW5ld190aW1lb3V0ICsgJyBtaWxpc2Vjb25kcycpO1xyXG5cclxuXHJcblxyXG5cclxuICAgICAgICAvL0NvbnZlcnQgdG8gdGhlIG1vcmUgY29tcGxldGUgSUF1dGhlbnRpY2F0aW9uTWFuYWdlclNldHRpbmdzXHJcbiAgICAgICAgdGhpcy5BdXRoZW50aWNhdGlvbk1hbmFnZXJTZXR0aW5ncyA9IFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgYXV0aG9yaXR5OiBhdXRoZW50aWNhdGlvblNldHRpbmdzLmF1dGhvcml0eSxcclxuICAgICAgICAgICAgY2xpZW50X2lkOiBhdXRoZW50aWNhdGlvblNldHRpbmdzLmNsaWVudF9pZCxcclxuICAgICAgICAgICAgY2xpZW50X3VybDogYXV0aGVudGljYXRpb25TZXR0aW5ncy5jbGllbnRfdXJsLFxyXG5cclxuICAgICAgICAgICAgbWF4X3JldHJ5X3JlbmV3OiBhdXRoZW50aWNhdGlvblNldHRpbmdzLm1heF9yZXRyeV9yZW5ldywgXHJcbiAgICAgICAgICAgIHNpbGVudF9yZW5ld190aW1lb3V0OiBhdXRoZW50aWNhdGlvblNldHRpbmdzLnNpbGVudF9yZW5ld190aW1lb3V0LFxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgcmVzcG9uc2VfdHlwZTogYXV0aGVudGljYXRpb25TZXR0aW5ncy5yZXNwb25zZV90eXBlLFxyXG4gICAgICAgICAgICBzY29wZTogYXV0aGVudGljYXRpb25TZXR0aW5ncy5zY29wZSxcclxuXHJcbiAgICAgICAgICAgIHBhdHRlcm46IGF1dGhlbnRpY2F0aW9uU2V0dGluZ3MucGF0dGVybixcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHJlZGlyZWN0X3VyaSA6IGF1dGhlbnRpY2F0aW9uU2V0dGluZ3MuY2xpZW50X3VybCxcclxuICAgICAgICAgICAgc2lsZW50X3JlZGlyZWN0X3VyaTogYXV0aGVudGljYXRpb25TZXR0aW5ncy5jbGllbnRfdXJsLFxyXG4gICAgICAgICAgICBwb3N0X2xvZ291dF9yZWRpcmVjdF91cmk6IGF1dGhlbnRpY2F0aW9uU2V0dGluZ3MuY2xpZW50X3VybCxcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGF1dGhvcml6YXRpb25fdXJsIDogYXV0aGVudGljYXRpb25TZXR0aW5ncy5hdXRob3JpemF0aW9uX3VybCB8fCBhdXRoZW50aWNhdGlvblNldHRpbmdzLmF1dGhvcml0eSArIFwiL2Nvbm5lY3QvYXV0aG9yaXplXCIsXHJcbiAgICAgICAgICAgIHRva2VuX3VybCA6IGF1dGhlbnRpY2F0aW9uU2V0dGluZ3MudG9rZW5fdXJsIHx8IGF1dGhlbnRpY2F0aW9uU2V0dGluZ3MuYXV0aG9yaXR5ICsgXCIvY29ubmVjdC90b2tlblwiLFxyXG4gICAgICAgICAgICB1c2VyaW5mb191cmw6IGF1dGhlbnRpY2F0aW9uU2V0dGluZ3MudXNlcmluZm9fdXJsIHx8IGF1dGhlbnRpY2F0aW9uU2V0dGluZ3MuYXV0aG9yaXR5ICsgXCIvY29ubmVjdC91c2VyaW5mb1wiLFxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgbG9hZFVzZXJJbmZvOiB0cnVlLFxyXG4gICAgICAgICAgICBhdXRvbWF0aWNTaWxlbnRSZW5ldzogdHJ1ZSxcclxuICAgICAgICB9O1xyXG5cclxuXHJcbiAgICAgICAgbGV0IHBhdHRlcm4gPSB0aGlzLkF1dGhlbnRpY2F0aW9uTWFuYWdlclNldHRpbmdzLnBhdHRlcm47XHJcbiAgICAgICAgY29uc29sZS5kZWJ1ZygnVXNlciBwYXR0ZXJuOiAnICsgUGF0dGVybltwYXR0ZXJuXSk7XHJcbiAgICAgICAgaWYodGhpcy5BdXRoZW50aWNhdGlvbk1hbmFnZXJTZXR0aW5ncy5wYXR0ZXJuID09IFBhdHRlcm4uYXV0bylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGxldCBlbnZpcm9ubWVudCA6YW55ID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgIHRyeXtcclxuICAgICAgICAgICAgICAgIGVudmlyb25tZW50ID0gKDxhbnk+d2luZG93KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXRjaChlcnJvcilcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5kZWJ1ZygnU2hvdWxkIG5vdCBiZSBhbiBlbnZpcm9ubWVudCB3aXRoIGEgd2luZG93IGdsb2JhbCAobmF0aXZlc2NyaXB0L25vZGUgbWF5YmU/KScpO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5kZWJ1ZyhlcnJvcik7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmKGVudmlyb25tZW50ICE9IG51bGwpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmKCEhZW52aXJvbm1lbnQuY29yZG92YSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBwYXR0ZXJuID0gUGF0dGVybi5jb3Jkb3ZhO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZihlbnZpcm9ubWVudCAmJiBlbnZpcm9ubWVudC5wcm9jZXNzICYmIGVudmlyb25tZW50LnByb2Nlc3MudHlwZSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBwYXR0ZXJuID0gUGF0dGVybi5lbGVjdHJvbjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYoKDxXaW5kb3c+ZW52aXJvbm1lbnQpLmxvY2F0aW9uLmhyZWYuaW5kZXhPZignZmlsZTonKSA+IC0xKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHBhdHRlcm4gPSBQYXR0ZXJuLmlldGY7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGF0dGVybiA9IFBhdHRlcm4ubm9uZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIC8vVE9ETzogY2hlY2sgYWdhaW5zdCBub2RlP1xyXG4gICAgICAgICAgICAgICAgcGF0dGVybiA9IFBhdHRlcm4ubmF0aXZlc2NyaXB0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zb2xlLmRlYnVnKCdFbnZpcm9ubWVudCBwYXR0ZXJuOiAnICsgUGF0dGVybltwYXR0ZXJuXSk7XHJcblxyXG4gICAgICAgIGlmKHBhdHRlcm4gPT0gUGF0dGVybi5pZXRmIHx8IHBhdHRlcm4gPT0gUGF0dGVybi5lbGVjdHJvbiB8fCBwYXR0ZXJuID09IFBhdHRlcm4ubmF0aXZlc2NyaXB0KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgbGV0IHNldHRpbmdzID0gdGhpcy5BdXRoZW50aWNhdGlvbk1hbmFnZXJTZXR0aW5ncztcclxuXHJcbiAgICAgICAgICAgIHNldHRpbmdzLmNsaWVudF91cmwgPSAndXJuOmlldGY6d2c6b2F1dGg6Mi4wOm9vYjphdXRvJztcclxuXHJcbiAgICAgICAgICAgIHRoaXMuQXV0aGVudGljYXRpb25NYW5hZ2VyU2V0dGluZ3MgPSBzZXR0aW5ncztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmKHBhdHRlcm4gPT0gUGF0dGVybi5jb3Jkb3ZhKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgbGV0IHNldHRpbmdzID0gdGhpcy5BdXRoZW50aWNhdGlvbk1hbmFnZXJTZXR0aW5ncztcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHNldHRpbmdzLmNsaWVudF91cmwgPSAnaHR0cHM6Ly9sb2NhbGhvc3Qvb2lkYyc7XHJcbiAgICAgICAgICAgICg8YW55PnNldHRpbmdzKS5wb3B1cE5hdmlnYXRvciA9IG5ldyAoPGFueT5PaWRjKS5Db3Jkb3ZhUG9wdXBOYXZpZ2F0b3IoKTtcclxuICAgICAgICAgICAgKDxhbnk+c2V0dGluZ3MpLmlmcmFtZU5hdmlnYXRvciA9IG5ldyAoPGFueT5PaWRjKS5Db3Jkb3ZhSUZyYW1lTmF2aWdhdG9yKCk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLkF1dGhlbnRpY2F0aW9uTWFuYWdlclNldHRpbmdzID0gc2V0dGluZ3M7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zb2xlLmRlYnVnKCdDbGllbnRVcmw6ICcgKyBhdXRoZW50aWNhdGlvblNldHRpbmdzLmNsaWVudF91cmwpO1xyXG5cclxuICAgICAgICBsZXQgdXNlck1hbmFnZXJTZXR0aW5ncyA6T2lkYy5Vc2VyTWFuYWdlclNldHRpbmdzID0gdGhpcy5BdXRoZW50aWNhdGlvbk1hbmFnZXJTZXR0aW5ncztcclxuXHJcbiAgICAgICAgdGhpcy5vaWRjVG9rZW5NYW5hZ2VyID0gbmV3IE9pZGMuVXNlck1hbmFnZXIodXNlck1hbmFnZXJTZXR0aW5ncyk7XHJcblxyXG4gICAgICAgIC8vIHRoaXMub2lkY1Rva2VuTWFuYWdlci5ldmVudHMuYWRkVXNlckxvYWRlZCgoKSA9PiB7XHJcbiAgICAgICAgLy8gICAgIHRoaXMuQXV0aGVudGljYXRpb25NYW5hZ2VyU2V0dGluZ3MuaXNfYXV0aGVudGljYXRlZCA9IHRydWU7XHJcbiAgICAgICAgLy8gICAgIHRoaXMuQXV0aGVudGljYXRpb25NYW5hZ2VyU2V0dGluZ3MgPSB0aGlzLkF1dGhlbnRpY2F0aW9uTWFuYWdlclNldHRpbmdzO1xyXG4gICAgICAgIC8vIH0pO1xyXG4gICAgICAgIC8vUmV0cnkgaW5kZWZpbml0bHkgZm9yIHJlbmV3XHJcbiAgICAgICAgLy8gdGhpcy5vaWRjVG9rZW5NYW5hZ2VyLmV2ZW50cy5hZGRTaWxlbnRSZW5ld0Vycm9yKCgpID0+IHtcclxuICAgICAgICAvLyAgICAgbGV0IGNvdW50ID0gMTtcclxuXHJcbiAgICAgICAgLy8gICAgIHRoaXMub2lkY1Rva2VuTWFuYWdlci5zaWduaW5TaWxlbnQoKTtcclxuXHJcbiAgICAgICAgLy8gICAgIGxldCBzdWNjZXNzID0gKCkgPT4ge1xyXG4gICAgICAgIC8vICAgICAgICAgY29uc29sZS5kZWJ1ZygnUmVuZXdlZCBhZnRlciAnICsgY291bnQudG9TdHJpbmcoKSArICcgZmFpbHMhJyk7XHJcbiAgICAgICAgLy8gICAgIH07XHJcbiAgICAgICAgLy8gICAgIGxldCBmYWlsID0gKGVycm9yKSA9PiB7XHJcbiAgICAgICAgLy8gICAgICAgICBjb3VudCsrO1xyXG4gICAgICAgIC8vICAgICAgICAgY29uc29sZS5kZWJ1ZygnVG9rZW4gbm90IHJlbmV3ZWQhIFRyeWluZyBhZ2FpbiBhZnRlciAnICsgY291bnQudG9TdHJpbmcoKSArICcgZmFpbHMhIE1heCByZXRyeSBzZXQgdG8gJyArIHRoaXMuQXV0aGVudGljYXRpb25NYW5hZ2VyU2V0dGluZ3MubWF4X3JldHJ5X3JlbmV3ICsgJyEnKTtcclxuXHJcbiAgICAgICAgLy8gICAgICAgICBpZihjb3VudCA8IHRoaXMuQXV0aGVudGljYXRpb25NYW5hZ2VyU2V0dGluZ3MubWF4X3JldHJ5X3JlbmV3KVxyXG4gICAgICAgIC8vICAgICAgICAge1xyXG4gICAgICAgIC8vICAgICAgICAgICAgIHJldHVybiB0aGlzLm9pZGNUb2tlbk1hbmFnZXIucmVuZXdUb2tlblNpbGVudEFzeW5jKCkudGhlbihzdWNjZXNzLCBmYWlsKTtcclxuICAgICAgICAvLyAgICAgICAgIH1lbHNle1xyXG4gICAgICAgIC8vICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1Rva2VuIG5vdCByZW5ld2VkIScpO1xyXG4gICAgICAgIC8vICAgICAgICAgICAgIHRoaXMuY2FsbGJhY2tzVG9rZW5SZW5ld0ZhaWxlZFJldHJ5TWF4LmZvckVhY2goKGNhbGxiYWNrKT0+IHtcclxuICAgICAgICAvLyAgICAgICAgICAgICAgICAgY2FsbGJhY2soKTtcclxuICAgICAgICAvLyAgICAgICAgICAgICB9KTtcclxuICAgICAgICAvLyAgICAgICAgICAgICByZXR1cm4gcHJvbWlzZTtcclxuICAgICAgICAvLyAgICAgICAgIH1cclxuICAgICAgICAvLyAgICAgfTtcclxuXHJcbiAgICAgICAgLy8gICAgIGxldCBjaGlsZFByb21pc2UgPSBwcm9taXNlLnRoZW4oc3VjY2VzcywgZmFpbCk7XHJcbiAgICAgICAgLy8gICAgIHJldHVybiBjaGlsZFByb21pc2U7XHJcbiAgICAgICAgLy8gfSk7XHJcblxyXG4gICAgICAgIFxyXG4gICAgfVxyXG4gICAgXHJcblxyXG5cclxuXHJcblxyXG4gICAgcHJvdGVjdGVkIFByb2Nlc3NUb2tlbklmTmVlZGVkKCkgOiBQcm9taXNlTGlrZTxPaWRjLlVzZXI+XHJcbiAgICB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuSXNBdXRoZW50aWNhdGVkLnRoZW4oaXNBdXRoZW50aWNhdGVkID0+IHtcclxuXHJcbiAgICAgICAgICAgIGlmIChsb2NhdGlvbi5ocmVmLmluZGV4T2YoJ2FjY2Vzc190b2tlbj0nKSA+IC0xICYmIChpc0F1dGhlbnRpY2F0ZWQgfHwgbG9jYXRpb24uaHJlZi5pbmRleE9mKCdwcm9tcHQ9bm9uZScpID4gLTEpKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmRlYnVnKCdQcm9jZXNzaW5nIHRva2VuISAoc2lsZW50bHkpJyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5vaWRjVG9rZW5NYW5hZ2VyLnNpZ25pblNpbGVudENhbGxiYWNrKCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBcclxuXHJcbiAgICAgICAgICAgIC8vaWYgdGhlIGFjdHVhbCBwYWdlIGlzIHRoZSAncmVkaXJlY3RfdXJpJyAobG9hZGVkIGZyb20gdGhlIGxvY2FsU3RvcmFnZSksIHRoZW4gaSBjb25zaWRlciB0byAncHJvY2VzcyB0aGUgdG9rZW4gY2FsbGJhY2snICBcclxuICAgICAgICAgICAgLy9pZihsb2NhdGlvbi5ocmVmLnN1YnN0cmluZygwLCB0aGlzLkF1dGhlbnRpY2F0aW9uTWFuYWdlclNldHRpbmdzLnJlZGlyZWN0X3VyaS5sZW5ndGgpID09PSB0aGlzLkF1dGhlbnRpY2F0aW9uTWFuYWdlclNldHRpbmdzLnJlZGlyZWN0X3VyaSlcclxuICAgICAgICAgICAgaWYobG9jYXRpb24uaHJlZi5pbmRleE9mKCdhY2Nlc3NfdG9rZW49JykgPiAtMSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5kZWJ1ZygnUHJvY2Vzc2luZyB0b2tlbiEnKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLlByb2Nlc3NUb2tlbkNhbGxiYWNrKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxldCBxUHJvbWlzZSA9IFEucmVzb2x2ZShudWxsKTtcclxuICAgICAgICAgICAgcmV0dXJuIHFQcm9taXNlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIFxyXG5cclxuICAgICAgICBcclxuICAgICAgICAvLyAvL2lmIHRoZSBhY3R1YWwgcGFnZSBpcyB0aGUgJ3NpbGVudF9yZWRpcmVjdF91cmknIChsb2FkZWQgZnJvbSB0aGUgbG9jYWxTdG9yYWdlKSwgdGhlbiBpIGNvbnNpZGVyIHRvICdwcm9jZXNzIHRoZSB0b2tlbiBjYWxsYmFjaydcclxuICAgICAgICAvLyBlbHNlIGlmIChsb2NhdGlvbi5ocmVmLnN1YnN0cmluZygwLCB0aGlzLkF1dGhlbnRpY2F0aW9uTWFuYWdlclNldHRpbmdzLnNpbGVudF9yZWRpcmVjdF91cmkubGVuZ3RoKSA9PT0gdGhpcy5BdXRoZW50aWNhdGlvbk1hbmFnZXJTZXR0aW5ncy5zaWxlbnRfcmVkaXJlY3RfdXJpKVxyXG4gICAgICAgIC8vIHtcclxuICAgICAgICAvLyAgICAgdGhpcy5SZW5ld1Rva2VuU2lsZW50KCk7XHJcbiAgICAgICAgLy8gfVxyXG5cclxuICAgIH1cclxuICAgIFxyXG4gICAgcHVibGljIEluaXQoYXV0aGVudGljYXRpb25TZXR0aW5ncz86IElBdXRoZW50aWNhdGlvblNldHRpbmdzKSA6IFByb21pc2VMaWtlPE9pZGMuVXNlcj5cclxuICAgIHtcclxuICAgICAgICBpZihhdXRoZW50aWNhdGlvblNldHRpbmdzICE9IG51bGwpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLkluaXRpYWxpemUoYXV0aGVudGljYXRpb25TZXR0aW5ncyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHJldHVybiB0aGlzLlByb2Nlc3NUb2tlbklmTmVlZGVkKCk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHB1YmxpYyBQcm9jZXNzVG9rZW5DYWxsYmFjaygpIDogUHJvbWlzZUxpa2U8YW55PlxyXG4gICAge1xyXG4gICAgICAgIHRoaXMuVmFsaWRhdGVJbml0aWFsaXphdGlvbigpO1xyXG4gICAgICAgICAgICAgICBcclxuICAgICAgICBsZXQgcHJvbWlzZTogUHJvbWlzZUxpa2U8YW55PiA9IG51bGw7XHJcblxyXG4gICAgICAgIGlmKHRoaXMuQXV0aGVudGljYXRpb25NYW5hZ2VyU2V0dGluZ3Mub3Blbl9vbl9wb3B1cClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHByb21pc2UgPSB0aGlzLm9pZGNUb2tlbk1hbmFnZXIuc2lnbmluUG9wdXBDYWxsYmFjaygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBwcm9taXNlID0gdGhpcy5vaWRjVG9rZW5NYW5hZ2VyLnNpZ25pblJlZGlyZWN0Q2FsbGJhY2soKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBwcm9taXNlUmVkaXJlY3QgPSBwcm9taXNlXHJcbiAgICAgICAgLnRoZW4oXHJcbiAgICAgICAgICAgICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuUmVkaXJlY3RUb0luaXRpYWxQYWdlKHRoaXMuQXV0aGVudGljYXRpb25NYW5hZ2VyU2V0dGluZ3MucmVkaXJlY3RfdXJpKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgKGVycm9yKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBsZXQgbWVzc2FnZSA9IFwiUHJvYmxlbSBHZXR0aW5nIFRva2VuIDogXCIgKyAoZXJyb3IubWVzc2FnZSB8fCBlcnJvcik7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbWVzc2FnZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIHJldHVybiBwcm9taXNlUmVkaXJlY3Q7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIHB1YmxpYyBSZW5ld1Rva2VuU2lsZW50KCkgOiBRLklQcm9taXNlPHZvaWQ+XHJcbiAgICAvLyB7XHJcbiAgICAvLyAgICAgdGhpcy5WYWxpZGF0ZUluaXRpYWxpemF0aW9uKCk7XHJcbiAgICAgICAgXHJcbiAgICAvLyAgICAgbGV0IGRlZmVyID0gUS5kZWZlcjx2b2lkPigpO1xyXG4gICAgLy8gICAgIHRoaXMub2lkY1Rva2VuTWFuYWdlci5yZW5ld1Rva2VuU2lsZW50QXN5bmMoKS50aGVuKFxyXG4gICAgLy8gICAgICAgICAoKSA9PiB7XHJcbiAgICAvLyAgICAgICAgICAgICBkZWZlci5yZXNvbHZlKCk7XHJcbiAgICAvLyAgICAgICAgIH0sXHJcbiAgICAvLyAgICAgICAgIChlcnJvcikgPT4ge1xyXG4gICAgLy8gICAgICAgICAgICAgbGV0IG1lc3NhZ2UgPSBcIlByb2JsZW0gR2V0dGluZyBUb2tlbiA6IFwiICsgKGVycm9yLm1lc3NhZ2UgfHwgZXJyb3IpOyBcclxuICAgIC8vICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XHJcbiAgICAvLyAgICAgICAgICAgICBkZWZlci5yZWplY3QobWVzc2FnZSk7XHJcbiAgICAvLyAgICAgICAgIH1cclxuICAgIC8vICAgICApO1xyXG4gICAgLy8gICAgIHJldHVybiBkZWZlci5wcm9taXNlO1xyXG4gICAgLy8gfVxyXG4gICAgXHJcblxyXG4gICAgcHJvdGVjdGVkIFJlZGlyZWN0VG9Jbml0aWFsUGFnZSh1cmkgOnN0cmluZylcclxuICAgIHtcclxuICAgICAgICBsb2NhdGlvbi5hc3NpZ24odXJpKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgXHJcbiAgICBwcm90ZWN0ZWQgVmFsaWRhdGVJbml0aWFsaXphdGlvbigpXHJcbiAgICB7XHJcbiAgICAgICAgaWYodGhpcy5BdXRoZW50aWNhdGlvbk1hbmFnZXJTZXR0aW5ncyA9PSBudWxsKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhyb3cgXCJBdXRoZW50aWNhdGlvbkNvbnRleHQgdW5pbml0aWFsaXplZCFcIjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIFxyXG4gICAgLyoqXHJcbiAgICAgKiBNYWtlIHRoZSBsb2dpbiBhdCB0aGUgY3VycmVudCBVUkksIGFuZCBwcm9jZXNzIHRoZSByZWNlaXZlZCB0b2tlbnMuXHJcbiAgICAgKiBPQlM6IFRoZSBSZWRpcmVjdCBVUkkgW2NhbGxiYWNrX3VybF0gKHRvIHJlY2VpdmUgdGhlIHRva2VuKSBhbmQgU2lsZW50IFJlZnJlc2ggRnJhbWUgVVJJIFtzaWxlbnRfcmVkaXJlY3RfdXJpXSAodG8gYXV0byByZW5ldyB3aGVuIGV4cGlyZWQpIGlmIG5vdCBpbmZvcm1lZCBpcyBhdXRvIGdlbmVyYXRlZCBiYXNlZCBvbiB0aGUgJ2NsaWVudF91cmwnIGluZm9ybWVkIGF0ICdJbml0JyBtZXRob2Qgd2l0aCB0aGUgZm9sbG93aW4gc3RyYXRlZ3k6XHJcbiAgICAgKiBgcmVkaXJlY3RfdXJsID0gY2xpZW50X3VybCArICc/Y2FsbGJhY2s9dHJ1ZSdgXHJcbiAgICAgKiBgc2lsZW50X3JlZGlyZWN0X3VyaSA9IGNsaWVudF91cmwgKyAnP3NpbGVudHJlZnJlc2hmcmFtZT10cnVlJ2AgXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wZW5PblBvcFVwXSAoZGVzY3JpcHRpb24pXHJcbiAgICAgKi9cclxuICAgIC8vIHB1YmxpYyBMb2dpbkFuZFByb2Nlc3NUb2tlbihvcGVuT25Qb3BVcD86IGJvb2xlYW4pXHJcbiAgICAvLyB7XHJcbiAgICAvLyAgICAgdGhpcy5WYWxpZGF0ZUluaXRpYWxpemF0aW9uKCk7XHJcbiAgICAgICAgXHJcbiAgICAvLyAgICAgbGV0IHNob3VsZE9wZW5PblBvcFVwID0gb3Blbk9uUG9wVXAgfHwgdGhpcy5BdXRoZW50aWNhdGlvbk1hbmFnZXJTZXR0aW5ncy5vcGVuX29uX3BvcHVwO1xyXG4gICAgICAgIFxyXG4gICAgLy8gICAgIC8vaWYgdGhlIGFjdHVhbCBwYWdlIGlzIHRoZSAncmVkaXJlY3RfdXJpJyAobG9hZGVkIGZyb20gdGhlIGxvY2FsU3RvcmFnZSksIHRoZW4gaSBjb25zaWRlciB0byAncHJvY2VzcyB0aGUgdG9rZW4gY2FsbGJhY2snICBcclxuICAgIC8vICAgICBpZihsb2NhdGlvbi5ocmVmLnN1YnN0cmluZygwLCB0aGlzLkF1dGhlbnRpY2F0aW9uTWFuYWdlclNldHRpbmdzLnJlZGlyZWN0X3VyaS5sZW5ndGgpID09PSB0aGlzLkF1dGhlbnRpY2F0aW9uTWFuYWdlclNldHRpbmdzLnJlZGlyZWN0X3VyaSlcclxuICAgIC8vICAgICB7XHJcbiAgICAvLyAgICAgICAgIHRoaXMuUHJvY2Vzc1Rva2VuQ2FsbGJhY2soKTtcclxuICAgIC8vICAgICB9XHJcbiAgICAvLyAgICAgLy9pZiB0aGUgYWN0dWFsIHBhZ2UgaXMgdGhlICdzaWxlbnRfcmVkaXJlY3RfdXJpJyAobG9hZGVkIGZyb20gdGhlIGxvY2FsU3RvcmFnZSksIHRoZW4gaSBjb25zaWRlciB0byAncHJvY2VzcyB0aGUgdG9rZW4gY2FsbGJhY2snXHJcbiAgICAvLyAgICAgZWxzZSBpZiAobG9jYXRpb24uaHJlZi5zdWJzdHJpbmcoMCwgdGhpcy5BdXRoZW50aWNhdGlvbk1hbmFnZXJTZXR0aW5ncy5zaWxlbnRfcmVkaXJlY3RfdXJpLmxlbmd0aCkgPT09IHRoaXMuQXV0aGVudGljYXRpb25NYW5hZ2VyU2V0dGluZ3Muc2lsZW50X3JlZGlyZWN0X3VyaSlcclxuICAgIC8vICAgICB7XHJcbiAgICAvLyAgICAgICAgIHRoaXMuUmVuZXdUb2tlblNpbGVudCgpO1xyXG4gICAgLy8gICAgIH1cclxuICAgIC8vICAgICAvL2lmIHRoZSBhY3R1YWwgcGFnZSBpcyB0aGUgJ2NsaWVudF91cmwnLCB0aGVuIGkgY29uc2lkZXIgdG8gbWFrZSB0aGUgJ2xvZ2luJ1xyXG4gICAgLy8gICAgIGVsc2UgaWYobG9jYXRpb24uaHJlZi5zdWJzdHJpbmcoMCwgdGhpcy5BdXRoZW50aWNhdGlvbk1hbmFnZXJTZXR0aW5ncy5jbGllbnRfdXJsLmxlbmd0aCkgPT09IHRoaXMuQXV0aGVudGljYXRpb25NYW5hZ2VyU2V0dGluZ3MuY2xpZW50X3VybClcclxuICAgIC8vICAgICB7XHJcbiAgICAvLyAgICAgICAgIGlmKHRoaXMuSXNBdXRoZW50aWNhdGVkID09PSBmYWxzZSlcclxuICAgIC8vICAgICAgICAge1xyXG4gICAgLy8gICAgICAgICAgICAgdGhpcy5Mb2dpbihzaG91bGRPcGVuT25Qb3BVcCk7XHJcbiAgICAvLyAgICAgICAgIH1cclxuICAgIC8vICAgICB9XHJcbiAgICAvLyB9XHJcbiAgICBcclxuICAgIHB1YmxpYyBMb2dpbihvcGVuT25Qb3BVcD86IGJvb2xlYW4pIDogUHJvbWlzZUxpa2U8YW55PlxyXG4gICAge1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5Jc0F1dGhlbnRpY2F0ZWQudGhlbigoaXNBdXRoZW50aWNhdGVkKSA9PiB7XHJcblxyXG4gICAgICAgICAgICBpZihpc0F1dGhlbnRpY2F0ZWQgPT09IGZhbHNlKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLlZhbGlkYXRlSW5pdGlhbGl6YXRpb24oKTtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgLy9UT0RPOiBUcmVhdCB3aGVuIGluIG1vYmlsZSBicm93c2VyIHRvIG5vdCBzdXBwb3J0IHBvcHVwXHJcbiAgICAgICAgICAgICAgICBsZXQgc2hvdWxkT3Blbk9uUG9wVXAgPSBvcGVuT25Qb3BVcCB8fCB0aGlzLkF1dGhlbnRpY2F0aW9uTWFuYWdlclNldHRpbmdzLm9wZW5fb25fcG9wdXA7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGlmIChzaG91bGRPcGVuT25Qb3BVcClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5vaWRjVG9rZW5NYW5hZ2VyLnNpZ25pblBvcHVwKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMub2lkY1Rva2VuTWFuYWdlci5zaWduaW5SZWRpcmVjdCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignQWxyZWFkeSBhdXRoZW50aWNhdGVkJyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5vaWRjVG9rZW5NYW5hZ2VyLmdldFVzZXIoKS50aGVuKCh1c2VyKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxsYmFja3NUb2tlbk9idGFpbmVkLmZvckVhY2goKGNhbGxiYWNrKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKHVzZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgXHJcblxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXQgSXNBdXRoZW50aWNhdGVkKCkgOlByb21pc2VMaWtlPGJvb2xlYW4+XHJcbiAgICB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMub2lkY1Rva2VuTWFuYWdlci5nZXRVc2VyKCkudGhlbih1c2VyID0+IHVzZXIgIT0gbnVsbCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gbGV0IGlzQXV0aGVudGljYXRlZCA6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgICAgICAgLy8gaWYodGhpcy5BdXRoZW50aWNhdGlvbk1hbmFnZXJTZXR0aW5ncyAhPSBudWxsICYmIHRoaXMuQXV0aGVudGljYXRpb25NYW5hZ2VyU2V0dGluZ3MuaXNfYXV0aGVudGljYXRlZCAhPSBudWxsKVxyXG4gICAgICAgIC8vIHtcclxuICAgICAgICAvLyAgICAgaXNBdXRoZW50aWNhdGVkID0gdGhpcy5BdXRoZW50aWNhdGlvbk1hbmFnZXJTZXR0aW5ncy5pc19hdXRoZW50aWNhdGVkO1xyXG4gICAgICAgIC8vIH1cclxuXHJcbiAgICAgICAgLy8gcmV0dXJuIGlzQXV0aGVudGljYXRlZDtcclxuXHJcblxyXG5cclxuICAgIH1cclxuXHJcbiAgICAvLyBwdWJsaWMgZ2V0IFRva2Vuc0NvbnRlbnRzKCkgOiBUb2tlbnNDb250ZW50c1xyXG4gICAgLy8ge1xyXG4gICAgLy8gICAgIGxldCB0b2tlbkNvbnRlbnRzID0gbmV3IFRva2Vuc0NvbnRlbnRzKCk7XHJcbiAgICAgICAgXHJcbiAgICAvLyAgICAgdG9rZW5Db250ZW50cy5BY2Nlc3NUb2tlbiA9IHRoaXMuQWNjZXNzVG9rZW47XHJcbiAgICAvLyAgICAgdG9rZW5Db250ZW50cy5JZGVudGl0eVRva2VuID0gdGhpcy5JZGVudGl0eVRva2VuO1xyXG4gICAgICAgIFxyXG4gICAgLy8gICAgIHRva2VuQ29udGVudHMuQWNjZXNzVG9rZW5Db250ZW50ID0gdGhpcy5BY2Nlc3NUb2tlbkNvbnRlbnQ7XHJcbiAgICAvLyAgICAgdG9rZW5Db250ZW50cy5JZGVudGl0eVRva2VuQ29udGVudCA9IHRoaXMuSWRlbnRpdHlUb2tlbkNvbnRlbnQ7XHJcbiAgICAvLyAgICAgdG9rZW5Db250ZW50cy5Qcm9maWxlQ29udGVudCA9IHRoaXMuUHJvZmlsZUNvbnRlbnQ7XHJcbiAgICAgICAgXHJcbiAgICAvLyAgICAgcmV0dXJuIHRva2VuQ29udGVudHM7XHJcbiAgICAvLyB9XHJcblxyXG4gICAgLy8gcHJvdGVjdGVkIGdldCBBY2Nlc3NUb2tlbigpOiBzdHJpbmcgXHJcbiAgICAvLyB7XHJcbiAgICAvLyAgICAgaWYgKHRoaXMub2lkY1Rva2VuTWFuYWdlciAhPSBudWxsKVxyXG4gICAgLy8gICAgIHtcclxuICAgIC8vICAgICAgICAgbGV0IGlkX3Rva2VuID0gdGhpcy5vaWRjVG9rZW5NYW5hZ2VyLmFjY2Vzc190b2tlbjtcclxuICAgIC8vICAgICAgICAgcmV0dXJuIGlkX3Rva2VuO1xyXG4gICAgLy8gICAgIH1cclxuICAgIC8vICAgICByZXR1cm4gbnVsbDtcclxuICAgIC8vIH1cclxuXHJcblxyXG4gICAgLy8gcHJvdGVjdGVkIGdldCBBY2Nlc3NUb2tlbkNvbnRlbnQoKTogYW55IFxyXG4gICAgLy8ge1xyXG4gICAgLy8gICAgIGlmKHRoaXMub2lkY1Rva2VuTWFuYWdlciAhPSBudWxsKVxyXG4gICAgLy8gICAgIHtcclxuICAgIC8vICAgICAgICAgaWYodGhpcy5vaWRjVG9rZW5NYW5hZ2VyLmFjY2Vzc190b2tlbiAhPSBudWxsKVxyXG4gICAgLy8gICAgICAgICB7XHJcbiAgICAvLyAgICAgICAgICAgICBsZXQgYWNjZXNzVG9rZW5Db250ZW50ID0gdGhpcy5vaWRjVG9rZW5NYW5hZ2VyLmFjY2Vzc190b2tlbi5zcGxpdCgnLicpWzFdO1xyXG4gICAgLy8gICAgICAgICAgICAgaWYoYWNjZXNzVG9rZW5Db250ZW50ICE9IG51bGwpXHJcbiAgICAvLyAgICAgICAgICAgICB7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgbGV0IHZhbG9yID0gIEpTT04ucGFyc2UoYXRvYihhY2Nlc3NUb2tlbkNvbnRlbnQpKTtcclxuICAgIC8vICAgICAgICAgICAgICAgICByZXR1cm4gdmFsb3I7XHJcbiAgICAvLyAgICAgICAgICAgICB9XHJcbiAgICAvLyAgICAgICAgIH1cclxuICAgIC8vICAgICB9XHJcbiAgICAvLyAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAvLyB9XHJcbiAgICBcclxuICAgIC8vIHByb3RlY3RlZCBnZXQgSWRlbnRpdHlUb2tlbigpOiBzdHJpbmcgXHJcbiAgICAvLyB7XHJcbiAgICAvLyAgICAgaWYgKHRoaXMub2lkY1Rva2VuTWFuYWdlciAhPSBudWxsKVxyXG4gICAgLy8gICAgIHtcclxuICAgIC8vICAgICAgICAgbGV0IGlkX3Rva2VuID0gdGhpcy5vaWRjVG9rZW5NYW5hZ2VyLmlkX3Rva2VuO1xyXG4gICAgLy8gICAgICAgICByZXR1cm4gaWRfdG9rZW47XHJcbiAgICAvLyAgICAgfVxyXG4gICAgLy8gICAgIHJldHVybiBudWxsO1xyXG4gICAgLy8gfVxyXG5cclxuICAgIFxyXG4gICAgLy8gcHJvdGVjdGVkIGdldCBJZGVudGl0eVRva2VuQ29udGVudCgpOiBhbnlcclxuICAgIC8vIHtcclxuICAgIC8vICAgICBpZih0aGlzLm9pZGNUb2tlbk1hbmFnZXIgIT0gbnVsbClcclxuICAgIC8vICAgICB7XHJcbiAgICAvLyAgICAgICAgIGlmKHRoaXMub2lkY1Rva2VuTWFuYWdlci5pZF90b2tlbiAhPSBudWxsKVxyXG4gICAgLy8gICAgICAgICB7XHJcbiAgICAvLyAgICAgICAgICAgICBsZXQgaWRlbnRpdHlUb2tlbkNvbnRlbnQgPSB0aGlzLm9pZGNUb2tlbk1hbmFnZXIuaWRfdG9rZW4uc3BsaXQoJy4nKVsxXTtcclxuICAgIC8vICAgICAgICAgICAgIGlmKGlkZW50aXR5VG9rZW5Db250ZW50ICE9IG51bGwpXHJcbiAgICAvLyAgICAgICAgICAgICB7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgbGV0IHZhbG9yID0gSlNPTi5wYXJzZShhdG9iKGlkZW50aXR5VG9rZW5Db250ZW50KSk7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbG9yO1xyXG4gICAgLy8gICAgICAgICAgICAgfVxyXG4gICAgLy8gICAgICAgICB9XHJcbiAgICAvLyAgICAgfVxyXG4gICAgLy8gfVxyXG4gICAgXHJcbiAgICAvLyBwcm90ZWN0ZWQgZ2V0IFByb2ZpbGVDb250ZW50KCk6IGFueVxyXG4gICAgLy8ge1xyXG4gICAgLy8gICAgIGlmKHRoaXMub2lkY1Rva2VuTWFuYWdlciAhPSBudWxsKVxyXG4gICAgLy8gICAgIHtcclxuICAgIC8vICAgICAgICAgaWYodGhpcy5vaWRjVG9rZW5NYW5hZ2VyLnByb2ZpbGUgIT0gbnVsbClcclxuICAgIC8vICAgICAgICAge1xyXG4gICAgLy8gICAgICAgICAgICAgbGV0IHZhbG9yID0gdGhpcy5vaWRjVG9rZW5NYW5hZ2VyLnByb2ZpbGU7XHJcbiAgICAvLyAgICAgICAgICAgICByZXR1cm4gdmFsb3I7XHJcbiAgICAvLyAgICAgICAgIH1cclxuICAgIC8vICAgICB9XHJcbiAgICAvLyAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAvLyB9XHJcbn1cclxuXHJcbi8vIGV4cG9ydCBjbGFzcyBUb2tlbnNDb250ZW50c1xyXG4vLyB7XHJcbi8vICAgICBwdWJsaWMgZ2V0IElzQXV0aGVudGljYXRlZCgpIDpib29sZWFuXHJcbi8vICAgICB7XHJcbi8vICAgICAgICAgaWYodGhpcy5BY2Nlc3NUb2tlbkNvbnRlbnQgPT0gbnVsbClcclxuLy8gICAgICAgICB7XHJcbi8vICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuLy8gICAgICAgICB9XHJcbi8vICAgICAgICAgZWxzZVxyXG4vLyAgICAgICAgIHtcclxuLy8gICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgfVxyXG4gICAgXHJcbi8vICAgICBwcml2YXRlIF9wcm9maWxlQ29udGVudDogYW55O1xyXG4vLyAgICAgcHVibGljIGdldCBQcm9maWxlQ29udGVudCgpOiBhbnlcclxuLy8gICAgIHtcclxuLy8gICAgICAgICByZXR1cm4gdGhpcy5fcHJvZmlsZUNvbnRlbnQ7XHJcbi8vICAgICB9XHJcbi8vICAgICBwdWJsaWMgc2V0IFByb2ZpbGVDb250ZW50KHZhbHVlOiBhbnkpXHJcbi8vICAgICB7XHJcbi8vICAgICAgICAgdGhpcy5fcHJvZmlsZUNvbnRlbnQgPSB2YWx1ZTtcclxuLy8gICAgIH1cclxuICAgIFxyXG4gICAgXHJcbiAgICBcclxuLy8gICAgIHByaXZhdGUgX2FjY2Vzc1Rva2VuOiBzdHJpbmc7XHJcbi8vICAgICBwdWJsaWMgZ2V0IEFjY2Vzc1Rva2VuKCk6IHN0cmluZ1xyXG4vLyAgICAge1xyXG4vLyAgICAgICAgIHJldHVybiB0aGlzLl9hY2Nlc3NUb2tlbjtcclxuLy8gICAgIH1cclxuLy8gICAgIHB1YmxpYyBzZXQgQWNjZXNzVG9rZW4odmFsdWU6IHN0cmluZylcclxuLy8gICAgIHtcclxuLy8gICAgICAgICB0aGlzLl9hY2Nlc3NUb2tlbiA9IHZhbHVlO1xyXG4vLyAgICAgfVxyXG4gICAgXHJcbiAgICBcclxuLy8gICAgIHByaXZhdGUgX2FjY2Vzc1Rva2VuQ29udGVudDogYW55O1xyXG4vLyAgICAgcHVibGljIGdldCBBY2Nlc3NUb2tlbkNvbnRlbnQoKTogYW55XHJcbi8vICAgICB7XHJcbi8vICAgICAgICAgcmV0dXJuIHRoaXMuX2FjY2Vzc1Rva2VuQ29udGVudDtcclxuLy8gICAgIH1cclxuLy8gICAgIHB1YmxpYyBzZXQgQWNjZXNzVG9rZW5Db250ZW50KHZhbHVlOiBhbnkpXHJcbi8vICAgICB7XHJcbi8vICAgICAgICAgdGhpcy5fYWNjZXNzVG9rZW5Db250ZW50ID0gdmFsdWU7XHJcbi8vICAgICB9XHJcbiAgICBcclxuICAgIFxyXG4gICAgXHJcbiAgICBcclxuICAgIFxyXG4vLyAgICAgcHJpdmF0ZSBfaWRlbnRpdHlUb2tlbjogc3RyaW5nO1xyXG4vLyAgICAgcHVibGljIGdldCBJZGVudGl0eVRva2VuKCk6IHN0cmluZ1xyXG4vLyAgICAge1xyXG4vLyAgICAgICAgIHJldHVybiB0aGlzLl9pZGVudGl0eVRva2VuO1xyXG4vLyAgICAgfVxyXG4vLyAgICAgcHVibGljIHNldCBJZGVudGl0eVRva2VuKHZhbHVlOiBzdHJpbmcpXHJcbi8vICAgICB7XHJcbi8vICAgICAgICAgdGhpcy5faWRlbnRpdHlUb2tlbiA9IHZhbHVlO1xyXG4vLyAgICAgfVxyXG4gICAgXHJcbiAgICBcclxuLy8gICAgIHByaXZhdGUgX2lkZW50aXR5VG9rZW5Db250ZW50OiBhbnk7XHJcbi8vICAgICBwdWJsaWMgZ2V0IElkZW50aXR5VG9rZW5Db250ZW50KCk6IGFueVxyXG4vLyAgICAge1xyXG4vLyAgICAgICAgIHJldHVybiB0aGlzLl9pZGVudGl0eVRva2VuQ29udGVudDtcclxuLy8gICAgIH1cclxuLy8gICAgIHB1YmxpYyBzZXQgSWRlbnRpdHlUb2tlbkNvbnRlbnQodmFsdWU6IGFueSlcclxuLy8gICAgIHtcclxuLy8gICAgICAgICB0aGlzLl9pZGVudGl0eVRva2VuQ29udGVudCA9IHZhbHVlO1xyXG4vLyAgICAgfVxyXG4gICAgXHJcbiAgICBcclxuICAgIFxyXG4vLyAgICAgcHVibGljIHRva2Vuc0NvbnRlbnRzVG9BcnJheShpbmNsdWRlRW5jb2RlZFRva2Vuczpib29sZWFuID0gdHJ1ZSkgOiBBcnJheTxhbnk+XHJcbi8vICAgICB7XHJcbi8vICAgICAgICAgbGV0IHRva2Vuc0NvbnRlbnRzID0gbmV3IEFycmF5PGFueT4oKTtcclxuXHJcbi8vICAgICAgICAgdG9rZW5zQ29udGVudHMucHVzaCh0aGlzLklkZW50aXR5VG9rZW5Db250ZW50KTtcclxuLy8gICAgICAgICB0b2tlbnNDb250ZW50cy5wdXNoKHRoaXMuQWNjZXNzVG9rZW5Db250ZW50KTtcclxuLy8gICAgICAgICB0b2tlbnNDb250ZW50cy5wdXNoKHRoaXMuUHJvZmlsZUNvbnRlbnQpO1xyXG5cclxuLy8gICAgICAgICBpZihpbmNsdWRlRW5jb2RlZFRva2VucylcclxuLy8gICAgICAgICB7XHJcbi8vICAgICAgICAgICAgIGxldCBhY2Nlc3NUb2tlbkVuY29kZWQgPSB7ICdhY2Nlc3NfdG9rZW4nOiBBdXRoZW50aWNhdGlvbkNvbnRleHQuQ3VycmVudC5Ub2tlbnNDb250ZW50cy5BY2Nlc3NUb2tlbiB9O1xyXG4vLyAgICAgICAgICAgICB0b2tlbnNDb250ZW50cy5wdXNoKGFjY2Vzc1Rva2VuRW5jb2RlZCk7XHJcblxyXG4vLyAgICAgICAgICAgICBsZXQgaWRlbnRpdHlUb2tlbkVuY29kZWQgPSB7ICdpZF90b2tlbic6IEF1dGhlbnRpY2F0aW9uQ29udGV4dC5DdXJyZW50LlRva2Vuc0NvbnRlbnRzLklkZW50aXR5VG9rZW4gfTtcclxuLy8gICAgICAgICAgICAgdG9rZW5zQ29udGVudHMucHVzaChpZGVudGl0eVRva2VuRW5jb2RlZCk7IFxyXG4vLyAgICAgICAgIH1cclxuXHJcbi8vICAgICAgICAgcmV0dXJuIHRva2Vuc0NvbnRlbnRzO1xyXG4vLyAgICAgfVxyXG4gICAgXHJcbi8vICAgICBwdWJsaWMgZW5jb2RlZFRva2Vuc1RvQXJyYXkoKSA6IEFycmF5PGFueT5cclxuLy8gICAgIHtcclxuLy8gICAgICAgICByZXR1cm4gWyB0aGlzLklkZW50aXR5VG9rZW4sIHRoaXMuQWNjZXNzVG9rZW4gXTtcclxuLy8gICAgIH1cclxuLy8gfVxyXG5cclxuIl19
