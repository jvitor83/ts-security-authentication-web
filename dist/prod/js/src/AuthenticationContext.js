System.register(['./Pattern', 'q', 'oidc-client'], function(exports_1, context_1) {
    "use strict";
    var __moduleName = context_1 && context_1.id;
    var Pattern_1, Q, Oidc;
    var AuthenticationContext;
    return {
        setters:[
            function (Pattern_1_1) {
                Pattern_1 = Pattern_1_1;
            },
            function (Q_1) {
                Q = Q_1;
            },
            function (Oidc_1) {
                Oidc = Oidc_1;
            }],
        execute: function() {
            AuthenticationContext = (function () {
                function AuthenticationContext() {
                    this.callbacksTokenObtained = new Array();
                    this.callbacksTokenRenewFailedRetryMax = new Array();
                    var authenticationSettingsLoadedFromStorage = this.AuthenticationManagerSettings;
                    if (authenticationSettingsLoadedFromStorage != null) {
                        this.oidcTokenManager = new Oidc.UserManager(authenticationSettingsLoadedFromStorage);
                    }
                }
                Object.defineProperty(AuthenticationContext, "Current", {
                    get: function () {
                        if (AuthenticationContext._current === null) {
                            AuthenticationContext._current = new AuthenticationContext();
                        }
                        return AuthenticationContext._current;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AuthenticationContext.prototype, "IsInitialized", {
                    get: function () {
                        if (this.AuthenticationManagerSettings != null) {
                            return true;
                        }
                        else {
                            return false;
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                AuthenticationContext.Reset = function () {
                    AuthenticationContext._current = null;
                };
                AuthenticationContext.prototype.AddOnTokenObtained = function (callback) {
                    this.callbacksTokenObtained.push(callback);
                    this.oidcTokenManager.events.addUserLoaded(callback);
                };
                AuthenticationContext.prototype.AddOnTokenRenewFailedMaxRetry = function (callback) {
                    this.callbacksTokenRenewFailedRetryMax.push(callback);
                };
                Object.defineProperty(AuthenticationContext.prototype, "AuthenticationManagerSettings", {
                    get: function () {
                        var authenticationSettingsFromLocalStorage = null;
                        var authenticationSettingsFromLocalStorageStringify = localStorage.getItem('AuthenticationManagerSettings');
                        if (authenticationSettingsFromLocalStorageStringify != null) {
                            authenticationSettingsFromLocalStorage = JSON.parse(authenticationSettingsFromLocalStorageStringify);
                        }
                        return authenticationSettingsFromLocalStorage;
                    },
                    set: function (value) {
                        localStorage.setItem('AuthenticationManagerSettings', JSON.stringify(value));
                    },
                    enumerable: true,
                    configurable: true
                });
                AuthenticationContext.prototype.Initialize = function (authenticationSettings) {
                    if (authenticationSettings.authority == null || authenticationSettings.client_id == null || authenticationSettings.client_url == null) {
                        throw "Should be informed at least 'authority', 'client_id' and 'client_url'!";
                    }
                    if (authenticationSettings.pattern == null) {
                        authenticationSettings.pattern = Pattern_1.Pattern.none;
                    }
                    authenticationSettings.client_url = authenticationSettings.client_url;
                    authenticationSettings.scope = authenticationSettings.scope || 'openid profile email offline_access';
                    authenticationSettings.response_type = authenticationSettings.response_type || 'code id_token token';
                    authenticationSettings.open_on_popup = authenticationSettings.open_on_popup || false;
                    authenticationSettings.max_retry_renew = authenticationSettings.max_retry_renew || 35;
                    console.debug('Max retry setted to: ' + authenticationSettings.max_retry_renew);
                    authenticationSettings.silent_renew_timeout = authenticationSettings.silent_renew_timeout || 40 * 1000;
                    console.debug('Silent renew timeout setted to: ' + authenticationSettings.silent_renew_timeout + ' miliseconds');
                    var settings = {
                        authority: authenticationSettings.authority,
                        client_id: authenticationSettings.client_id,
                        client_url: authenticationSettings.client_url,
                        max_retry_renew: authenticationSettings.max_retry_renew,
                        silent_renew_timeout: authenticationSettings.silent_renew_timeout,
                        response_type: authenticationSettings.response_type,
                        scope: authenticationSettings.scope,
                        pattern: authenticationSettings.pattern,
                        redirect_uri: authenticationSettings.client_url,
                        silent_redirect_uri: authenticationSettings.client_url,
                        post_logout_redirect_uri: authenticationSettings.client_url,
                        authorization_url: authenticationSettings.authorization_url || authenticationSettings.authority + "/connect/authorize",
                        token_url: authenticationSettings.token_url || authenticationSettings.authority + "/connect/token",
                        userinfo_url: authenticationSettings.userinfo_url || authenticationSettings.authority + "/connect/userinfo",
                        loadUserInfo: true,
                        automaticSilentRenew: true,
                    };
                    console.debug('User pattern: ' + settings.pattern);
                    this.AuthenticationManagerSettings = settings;
                    var pattern = this.EnvironmentPattern;
                    console.debug('Environment pattern: ' + Pattern_1.Pattern[pattern]);
                    if (pattern == Pattern_1.Pattern.ietf || pattern == Pattern_1.Pattern.electron || pattern == Pattern_1.Pattern.nativescript) {
                        console.debug('Applying ietf pattern!');
                        settings.client_url = 'urn:ietf:wg:oauth:2.0:oob:auto';
                    }
                    if (pattern == Pattern_1.Pattern.cordova) {
                        console.debug('Applying cordova pattern!');
                        settings.client_url = 'https://localhost/oidc';
                        settings.popupNavigator = new Oidc.CordovaPopupNavigator();
                        settings.iframeNavigator = new Oidc.CordovaIFrameNavigator();
                    }
                    console.debug('ClientUrl: ' + settings.client_url);
                    this.AuthenticationManagerSettings = settings;
                    this.oidcTokenManager = new Oidc.UserManager(settings);
                };
                Object.defineProperty(AuthenticationContext.prototype, "EnvironmentPattern", {
                    get: function () {
                        var pattern = this.AuthenticationManagerSettings.pattern;
                        if (pattern == Pattern_1.Pattern.auto) {
                            var environment = null;
                            try {
                                environment = window;
                            }
                            catch (error) {
                                console.debug('Should not be an environment with a window global (nativescript/node maybe?)');
                                console.debug(error);
                            }
                            if (environment != null) {
                                if (!!environment.cordova) {
                                    pattern = Pattern_1.Pattern.cordova;
                                }
                                else if (environment && environment.process && environment.process.type) {
                                    pattern = Pattern_1.Pattern.electron;
                                }
                                else if (environment.location.href.indexOf('file:') > -1) {
                                    pattern = Pattern_1.Pattern.ietf;
                                }
                                else {
                                    pattern = Pattern_1.Pattern.none;
                                }
                            }
                            else {
                                pattern = Pattern_1.Pattern.nativescript;
                            }
                        }
                        return pattern;
                    },
                    enumerable: true,
                    configurable: true
                });
                AuthenticationContext.prototype.ProcessTokenIfNeeded = function () {
                    var _this = this;
                    return this.IsAuthenticated.then(function (isAuthenticated) {
                        if (location.href.indexOf('access_token=') > -1 && (isAuthenticated || location.href.indexOf('prompt=none') > -1)) {
                            console.debug('Processing token! (silently)');
                            return _this.oidcTokenManager.signinSilentCallback();
                        }
                        else if (location.href.indexOf('access_token=') > -1) {
                            console.debug('Processing token!');
                            return _this.ProcessTokenCallback();
                        }
                        var qPromise = Q.resolve(null);
                        return qPromise;
                    });
                };
                AuthenticationContext.prototype.Init = function (authenticationSettings) {
                    if (authenticationSettings != null) {
                        this.Initialize(authenticationSettings);
                    }
                    return this.ProcessTokenIfNeeded();
                };
                AuthenticationContext.prototype.ProcessTokenCallback = function () {
                    var _this = this;
                    this.ValidateInitialization();
                    var pattern = this.EnvironmentPattern;
                    var promise = null;
                    var environmentOnlySupportPopup = (pattern == Pattern_1.Pattern.cordova);
                    if (environmentOnlySupportPopup || this.AuthenticationManagerSettings.open_on_popup) {
                        promise = this.oidcTokenManager.signinPopupCallback();
                    }
                    else {
                        promise = this.oidcTokenManager.signinRedirectCallback();
                    }
                    var promiseRedirect = promise
                        .then(function () {
                        _this.RedirectToInitialPage(_this.AuthenticationManagerSettings.redirect_uri);
                    }, function (error) {
                        var message = "Problem Getting Token : " + (error.message || error);
                        console.error(message);
                        throw message;
                    });
                    return promiseRedirect;
                };
                AuthenticationContext.prototype.RedirectToInitialPage = function (uri) {
                    location.assign(uri);
                };
                AuthenticationContext.prototype.ValidateInitialization = function () {
                    if (this.AuthenticationManagerSettings == null) {
                        throw "AuthenticationContext uninitialized!";
                    }
                };
                AuthenticationContext.prototype.Login = function (openOnPopUp) {
                    var _this = this;
                    return this.IsAuthenticated.then(function (isAuthenticated) {
                        if (isAuthenticated === false) {
                            _this.ValidateInitialization();
                            var pattern = _this.EnvironmentPattern;
                            var environmentOnlySupportPopup = (pattern == Pattern_1.Pattern.cordova);
                            var shouldOpenOnPopUp = environmentOnlySupportPopup || (openOnPopUp || _this.AuthenticationManagerSettings.open_on_popup);
                            if (shouldOpenOnPopUp) {
                                var settings = _this.AuthenticationManagerSettings;
                                settings.open_on_popup = true;
                                _this.AuthenticationManagerSettings = settings;
                                return _this.oidcTokenManager.signinPopup();
                            }
                            else {
                                return _this.oidcTokenManager.signinRedirect();
                            }
                        }
                        else {
                            console.warn('Already authenticated');
                            return _this.oidcTokenManager.getUser().then(function (user) {
                                _this.callbacksTokenObtained.forEach(function (callback) {
                                    callback(user);
                                });
                            });
                        }
                    });
                };
                Object.defineProperty(AuthenticationContext.prototype, "IsAuthenticated", {
                    get: function () {
                        return this.oidcTokenManager.getUser().then(function (user) { return user != null; });
                    },
                    enumerable: true,
                    configurable: true
                });
                AuthenticationContext._current = null;
                return AuthenticationContext;
            }());
            exports_1("AuthenticationContext", AuthenticationContext);
        }
    }
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
