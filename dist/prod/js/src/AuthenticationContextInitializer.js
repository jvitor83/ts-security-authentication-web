System.register(['oidc-token-manager'], function(exports_1, context_1) {
    "use strict";
    var __moduleName = context_1 && context_1.id;
    var AuthenticationContextInitializer;
    return {
        setters:[
            function (_1) {}],
        execute: function() {
            AuthenticationContextInitializer = (function () {
                function AuthenticationContextInitializer() {
                    this.AccessTokenContent = null;
                    this.IdentityTokenContent = null;
                    this.ProfileContent = null;
                    var authenticationSettingsLoadedFromStorage = this.AuthenticationManagerSettings;
                    if (authenticationSettingsLoadedFromStorage != null) {
                        this.oidcTokenManager = new OidcTokenManager(authenticationSettingsLoadedFromStorage);
                    }
                }
                Object.defineProperty(AuthenticationContextInitializer, "Current", {
                    get: function () {
                        if (AuthenticationContextInitializer._current === null) {
                            AuthenticationContextInitializer._current = new AuthenticationContextInitializer();
                        }
                        return AuthenticationContextInitializer._current;
                    },
                    enumerable: true,
                    configurable: true
                });
                AuthenticationContextInitializer.Reset = function () {
                    AuthenticationContextInitializer._current = null;
                };
                Object.defineProperty(AuthenticationContextInitializer.prototype, "AuthenticationManagerSettings", {
                    get: function () {
                        var authenticationSettingsFromLocalStorage = null;
                        var authenticationSettingsFromLocalStorageStringify = localStorage.getItem('AuthenticationManagerSettings');
                        if (authenticationSettingsFromLocalStorageStringify != null) {
                            authenticationSettingsFromLocalStorage = JSON.parse(authenticationSettingsFromLocalStorageStringify);
                        }
                        return authenticationSettingsFromLocalStorage;
                    },
                    set: function (value) {
                        localStorage.setItem('AuthenticationManagerSettings', JSON.stringify(this.AuthenticationManagerSettings));
                    },
                    enumerable: true,
                    configurable: true
                });
                AuthenticationContextInitializer.prototype.Init = function (authenticationSettings) {
                    if (authenticationSettings.authority == null || authenticationSettings.client_id == null) {
                        throw "Should be informed at least 'authority' and 'client_id'!";
                    }
                    authenticationSettings.client_url = authenticationSettings.client_url || location.href;
                    authenticationSettings.scopes = authenticationSettings.scopes || 'openid profile email offline_access';
                    authenticationSettings.response_type = authenticationSettings.response_type || 'code id_token token';
                    authenticationSettings.open_on_popup = authenticationSettings.open_on_popup || false;
                    this.AuthenticationManagerSettings =
                        {
                            authority: authenticationSettings.authority,
                            client_id: authenticationSettings.client_id,
                            client_url: authenticationSettings.client_url,
                            open_on_popup: authenticationSettings.open_on_popup,
                            response_type: authenticationSettings.response_type,
                            scopes: authenticationSettings.scopes,
                            redirect_uri: authenticationSettings.client_url + '?callback=true',
                            silent_redirect_uri: authenticationSettings.client_url + "?silentrefreshframe=true",
                            post_logout_redirect_uri: authenticationSettings.client_url,
                            authorization_url: authenticationSettings.authority + "/connect/authorize",
                            token_url: authenticationSettings.authority + "/connect/token",
                            userinfo_url: authenticationSettings.authority + "/connect/userinfo",
                            load_user_profile: true,
                            silent_renew: true,
                        };
                    this.oidcTokenManager = new OidcTokenManager(this.AuthenticationManagerSettings);
                };
                AuthenticationContextInitializer.prototype.ProcessTokenCallback = function () {
                    this.oidcTokenManager.processTokenCallbackAsync();
                    this.GenerateTokens();
                };
                AuthenticationContextInitializer.prototype.RenewTokenSilent = function () {
                    this.oidcTokenManager.renewTokenSilentAsync();
                    this.GenerateTokens();
                };
                AuthenticationContextInitializer.prototype.LoginAndProcessToken = function (openOnPopUp) {
                    var shouldOpenOnPopUp = openOnPopUp || this.AuthenticationManagerSettings.open_on_popup;
                    if (location.href.substring(0, this.AuthenticationManagerSettings.redirect_uri.length) === this.AuthenticationManagerSettings.redirect_uri) {
                        this.ProcessTokenCallback();
                    }
                    else if (location.href.substring(0, this.AuthenticationManagerSettings.silent_redirect_uri.length) === this.AuthenticationManagerSettings.silent_redirect_uri) {
                        this.RenewTokenSilent();
                    }
                    else if (location.href.substring(0, this.AuthenticationManagerSettings.client_url.length) === this.AuthenticationManagerSettings.client_url) {
                        this.Login(shouldOpenOnPopUp);
                    }
                };
                AuthenticationContextInitializer.prototype.Login = function (openOnPopUp) {
                    var shouldOpenOnPopUp = openOnPopUp || this.AuthenticationManagerSettings.open_on_popup;
                    if (shouldOpenOnPopUp) {
                        this.oidcTokenManager.openPopupForTokenAsync();
                    }
                    else {
                        this.oidcTokenManager.redirectForToken();
                    }
                };
                Object.defineProperty(AuthenticationContextInitializer.prototype, "IsAuthenticated", {
                    get: function () {
                        this.GenerateTokens();
                        if (this.AccessTokenContent == null) {
                            return false;
                        }
                        else {
                            return true;
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                AuthenticationContextInitializer.prototype.GenerateTokens = function () {
                    if (this.oidcTokenManager != null) {
                        if (this.oidcTokenManager.access_token != null) {
                            var accessTokenContent = this.oidcTokenManager.access_token.split('.')[1];
                            if (accessTokenContent != null) {
                                this.AccessTokenContent = JSON.parse(atob(accessTokenContent));
                            }
                        }
                        if (this.oidcTokenManager.id_token != null) {
                            var identityTokenContent = this.oidcTokenManager.id_token.split('.')[1];
                            if (identityTokenContent != null) {
                                this.AccessTokenContent = JSON.parse(atob(identityTokenContent));
                            }
                        }
                        if (this.oidcTokenManager.profile != null) {
                            this.ProfileContent = this.oidcTokenManager.profile;
                        }
                    }
                };
                AuthenticationContextInitializer._current = null;
                return AuthenticationContextInitializer;
            }());
            exports_1("AuthenticationContextInitializer", AuthenticationContextInitializer);
        }
    }
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
